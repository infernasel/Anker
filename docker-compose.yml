services:
  frontend:
    image: ${IMAGE_REGISTRY:-simpleyyt}/anker-frontend:${IMAGE_TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      x-bake:
        platforms:
          - linux/amd64
          - linux/arm64
    ports:
      - "5173:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - anker-network
    environment:
      - BACKEND_URL=http://backend:8000

  backend:
    image: ${IMAGE_REGISTRY:-simpleyyt}/anker-backend:${IMAGE_TAG:-latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
      x-bake:
        platforms:
          - linux/amd64
          - linux/arm64
    depends_on:
      - sandbox
      - mongodb
      - redis
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- ./mcp.json:/etc/mcp.json # Mount MCP servers directory
    networks:
      - anker-network
    env_file:
      - .env

  sandbox:
    image: ${IMAGE_REGISTRY:-simpleyyt}/anker-sandbox:${IMAGE_TAG:-latest}
    build:
      context: ./sandbox
      dockerfile: Dockerfile
      x-bake:
        platforms:
          - linux/amd64
          - linux/arm64
    command: /bin/sh -c "exit 0"  # prevent sandbox from starting, ensure image is pulled
    restart: "no"
    networks:
      - anker-network

  mongodb:
    image: mongo:7.0
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    #ports:
    #  - "27017:27017"
    networks:
      - anker-network

  redis:
    image: redis:7.0
    restart: unless-stopped
    networks:
      - anker-network

volumes:
  mongodb_data:
    name: anker-mongodb-data

networks:
  anker-network:
    name: anker-network
    driver: bridge